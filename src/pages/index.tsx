import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { MouseEventHandler, useState } from "react";
import { Triangle } from "react-loader-spinner";
import Header from "../components/header";

// !) INCOMING DATA MATCHES OUTGOING FROM RUST
type VocabEntry = {
    // Raw vocab | other
    form: string | null;
    lemma: string | null;
    // Verb Pairs | Raw Vocab | Verb Trees
    imperfective: string | null;
    perfective: string | null;
    aspect: "Pf" | "Imp";
    // Verb Trees | other
    stem: string | null;
    prefixes: string[] | null;
    // Always given
    frequency: number;
    // Raw Vocab | other
    part_of_speech: string | null;
};

type ListResponse = {
    list: VocabEntry[];
    style: string;
    metadata: string;
};

enum LinkLanguage {
    Russian = 0,
    English = 1,
}

const Home: NextPage = () => {
    const [input, setInput] = useState("");
    const [breadth, setBreadth] = useState("Full List");
    const [style, setStyle] = useState("Raw Vocabulary");

    const [isListLoading, setIsListLoading] = useState<boolean>(false);
    const [listData, setListData] = useState<ListResponse | undefined>(
        undefined
    );

    const generateList = async () => {
        // !) OUTGOING DATA MATCHES INCOMING PATTERN IN RUST
        setIsListLoading(true);
        const res = await fetch("http://127.0.0.1:8000/russian/generate-list", {
            method: "POST",
            mode: "cors",
            body: JSON.stringify({
                input: input,
                breadth: breadth,
                style: style,
            }),
            headers: {
                "Content-Type": "application/json",
                "Access-Control-Allow-Origin": "http://127.0.0.1:3000",
            },
        });

        if (!res.ok) {
            throw new Error("Failed to fetch");
        }
        const data = (await res.json()) as ListResponse;

        if (typeof data == null || typeof data.list == null) {
            throw new Error("Failed to fetch");
        }
        setIsListLoading(false);
        setListData(data);
    };

    return (
        <>
            <Head>
                <title>Rubit - List Generator</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
                <link rel="preconnect" href="https://fonts.googleapis.com" />
                <link rel="preconnect" href="https://fonts.gstatic.com" />
                <link
                    href="https://fonts.googleapis.com/css2?family=Inter:wght@100;400;500;700;800&display=swap"
                    rel="stylesheet"
                />
            </Head>
            <Header />
            <main className="min-h-screen bg-stone-950 p-2 pb-16 pt-8 font-main  text-stone-300 sm:flex sm:flex-col sm:items-center sm:p-8">
                <div className="px-4 transition-all duration-200 sm:w-[600px] md:w-[700px] lg:w-[800px]">
                    <section>
                        <h1 className="mb-2 mt-2 text-center text-5xl font-bold">
                            Rubit
                        </h1>
                        <div className="py-8">
                            <h3 className="text-center text-2xl">
                                Create vocabulary lists from Russian text!
                            </h3>
                            <p className="py-2">
                                Try YouTube transcripts of podcasts or speeches,
                                book chapters, or articles.
                            </p>
                            <p className="py-2">
                                Input your study material text and choose
                                settings for what kind of list output you want.
                            </p>
                        </div>
                    </section>

                    {/* BUTTON SECTION */}
                    <div className="pb-8">
                        {/* Text Field */}
                        <div className="w-full ">
                            <textarea
                                className=" h-36 w-full rounded-sm bg-stone-900 p-3 outline-none outline-2 outline-offset-[-2px] outline-orange-700"
                                name="inputField"
                                onChange={(e) => setInput(e.target.value)}
                                id="inputField"
                            />
                        </div>
                        {/* Buttons */}
                        <div className="flex flex-col sm:flex-row sm:justify-between">
                            <div className="">
                                {/* Button 1 */}
                                <select
                                    className="mt-4 h-10 w-1/2 rounded-s-sm bg-stone-600 p-2 px-2 transition-all duration-100 hover:bg-orange-700  focus:ring-inset focus:ring-orange-800 sm:w-auto"
                                    name="Output_Breadth"
                                    id="Output_Breadth"
                                    onChange={(e) => setBreadth(e.target.value)}
                                    title="Select breadth of output list"
                                >
                                    <option>Full List</option>
                                    <option>Broad List</option>
                                    <option>Top Words</option>
                                    <option>Rare Words</option>
                                </select>

                                {/* Button 2 */}
                                <select
                                    className="mt-4 h-10 w-1/2 rounded-e-sm border-s-[1.5px] border-s-stone-700 bg-stone-600 p-2 px-2 ps-4 transition-all duration-100 hover:bg-orange-700 focus:ring-inset focus:ring-orange-800  sm:w-auto"
                                    name="Output_Style"
                                    id="Output_Style"
                                    onChange={(e) => setStyle(e.target.value)}
                                    title="Select style of output list"
                                >
                                    <option>Raw Vocabulary</option>
                                    <option>Verb Pairs</option>
                                    <option>Verb Trees</option>
                                </select>
                            </div>

                            {/* Button 3 */}
                            <div>
                                <button
                                    className="mt-4 h-10 w-full rounded-sm bg-stone-600 p-2 px-4 transition-all duration-100 hover:bg-orange-700 focus:ring-inset focus:ring-orange-800"
                                    title="Generate vocabulary list"
                                    type="submit"
                                    onClick={generateList}
                                    id="Create_List"
                                >
                                    Create List
                                </button>
                            </div>
                        </div>
                    </div>

                    {/* BUTTON SECTION END */}
                    {/* LIST SECTION */}

                    {listData ? (
                        <VocabList {...listData} />
                    ) : isListLoading ? (
                        <div className="mt-8 flex flex-row justify-center">
                            <Triangle
                                height="90"
                                width="90"
                                color="#c2410c"
                                ariaLabel="triangle-loading"
                                wrapperStyle={{}}
                                wrapperClass=""
                                visible={true}
                            />
                        </div>
                    ) : (
                        <>
                            <div>
                                <ul>
                                    You can set the "breadth" to include:
                                    <li>"Full List" (all words)</li>
                                    <li>
                                        "Broad List" (exclude the least common
                                        words)
                                    </li>
                                    <li>
                                        "Top Words" (only the most common words)
                                    </li>
                                    <li>
                                        "Bottom Words" (only the least common
                                        words)
                                    </li>
                                </ul>
                                <p className="">
                                    "Raw Vocabulary" will return all words,
                                    while "Verb Pairs" will return the aspectual
                                    pairs in your text, and "Verb Trees" will
                                    return verbs in the tree model, in the
                                    simplest form: Root Forms (-Branch Forms)
                                </p>
                                <p className="">
                                    All of the words will have links to
                                    Wiktionary/Викисловарь, which you can switch
                                    between using the button. If the key doesn't
                                    recognize a word, it will attempt to
                                    automatically update that word.
                                </p>
                            </div>
                        </>
                    )}
                    {/* LIST SECTION END */}
                </div>
            </main>
        </>
    );
};

export default Home;

const VocabList = (listData: ListResponse) => {
    const [linkLang, setLinkLang] = useState<LinkLanguage>(
        LinkLanguage.English
    );

    if (listData.style === "Raw Vocabulary")
        return (
            <div>
                <button
                    onClick={() => {
                        linkLang == LinkLanguage.English
                            ? setLinkLang(LinkLanguage.Russian)
                            : setLinkLang(LinkLanguage.English);
                    }}
                    className="float-right bg-stone-600 px-4 py-2 hover:bg-orange-700"
                >
                    Links: {linkLang == LinkLanguage.English ? "EN" : "RU"}
                </button>
                <ul>
                    {listData.list.map(
                        (vocabEntry: VocabEntry) =>
                            vocabEntry.lemma && (
                                <li key={vocabEntry.form}>
                                    <a
                                        className="hover:text-orange-700"
                                        target="_blank"
                                        href={
                                            linkLang == LinkLanguage.English
                                                ? `https://en.wiktionary.org/wiki/${vocabEntry.lemma}`
                                                : `https://ru.wiktionary.org/wiki/${vocabEntry.lemma}`
                                        }
                                    >
                                        {vocabEntry.lemma}
                                    </a>{" "}
                                    - {vocabEntry.frequency}
                                </li>
                            )
                    )}
                </ul>
            </div>
        );

    if (listData.style === "Verb Pairs")
        return (
            <div>
                <div></div>
            </div>
        );

    if (listData.style === "Verb Trees")
        return (
            <div>
                <div></div>
            </div>
        );
};
